for (PropertySource<?> ps : env.getPropertySources()) {
    System.out.println("Source: " + ps.getName());
    if (ps instanceof EnumerablePropertySource) {
        for (String propName : ((EnumerablePropertySource<?>) ps).getPropertyNames()) {
            System.out.println(" - " + propName + " = " + ps.getProperty(propName));
        }
    }
}


********************************

package com.citi.gfts.erecon.config;

import org.springframework.core.env.Environment;
import org.springframework.core.env.PropertySource;

public class VaultEnvironmentPropertySource extends PropertySource<Environment> {

    public VaultEnvironmentPropertySource(String name, Environment env) {
        super(name, env);
    }

    @Override
    public Object getProperty(String name) {
        Object value = this.source.getProperty(name);
        if (value instanceof String) {
            String stringValue = (String) value;
            if (stringValue.startsWith("ARC(")) {
                try {
                    // Insert your CyberArk lookup logic here!
                    return getPasswordFromCyberArk(
                        stringValue.substring(4, stringValue.length() - 1));
                } catch (Exception e) {
                    // Optional: log error
                    return null;
                }
            }
        }
        return value;
    }
    // Implement or inject your getPasswordFromCyberArk here as before
}



*********************************************

package com.citi.gfts.erecon.config;

import javax.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.MutablePropertySources;
import org.springframework.core.env.Environment;

@Configuration
public class VaultPropertySourceRegistrar {

    @Autowired
    private Environment env;

    @PostConstruct
    public void registerVaultPropertySource() {
        ConfigurableEnvironment configEnv = (ConfigurableEnvironment) env;
        MutablePropertySources sources = configEnv.getPropertySources();

        sources.addFirst(new VaultEnvironmentPropertySource("vaultEnvPropertySource", env));
        System.out.println("VaultEnvironmentPropertySource registered as highest priority.");
    }
}
